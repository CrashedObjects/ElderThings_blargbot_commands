{function;wsIconsUser;{//; returns a string with icon for each ws-tag the user has}
  	{set;~uid;{params;0}}
	{set;~wsRoles;387715016222048265;387715242957864971;387715522575204352;401489230951481354;406431073296318465}
  	{set;~allyRole;455134557532848139}
  	{set;~wsIcon;<:star_white_ws:379292760437555200>}
  	{set;~rsIcon;<:star_red_rs:379292716154093569>}
  	{set;~allyIcon;<:Ally:510103292697640960>}
	{set;~wsIcons;["<:BSO_WS:509790619577614367>","<:FIN_WS:509786098747179019>","<:ENF_WS:509790302622711808>","<:DAU_WS:509790315176001538>","<:OBN_WS:509790326257614851>"]}
  	{set;~rsIcons;["<:BSO_RS:510205929254420493>","<:FIN_RS:510206415563128853>","<:ENF_RS:510205040552574976>","<:DAU_RS:510205945276661782>","<:OBN_RS:510206456205803520>"]}
  	{set;~allyOppIcons;{get;~wsIcons}}
	{set;~userIcons;[]}
	{set;~wsIndex;-1}{set;~now;{time;X}}{set;~wsFound;0}
{void;
	{repeat;
		{set;~ws;{get;~wsRoles;{increment;~wsIndex}}}
		{if;{logic;||;{bool;{get;_{get;~ws}WSEnd};>;{get;~now}};{bool;{get;_{get;~ws}WSScan};>;0}};{//; scanning or active ws}
			{if;{userhasrole;{get;~ws};{get;~uid}};==;true;
				{push;~userIcons;{get;~wsIcons;{get;~wsIndex}}}
              	{set;~wsFound;1}
			}
		}
		;{length;{get;~wsRoles}}
	}
  	{if;{get;~wsFound};==;0;{//;not BSOWS}
      {if;{userhasrole;{get;~allyRole};{get;~uid}};==;true;
{//;        {set;~oppWS;{func.opp;{get;~uid}}}}
        {set;~oppWS;}
        {if;{get;~oppWS};!=;;
          	{push;~userIcons;{get;~allyIcon}{get;~allyOppIcons;{indexof;{get;~wsRoles};{get;~oppWS}}}}
          	;
        	{push;~userIcons;{get;~allyIcon}}
        }
        ;{//; not ally}
        {push;~userIcons;{get;~rsIcon}}{//; add check for home corp here}
      }
    }
}
{join;~userIcons;{space}}
}

{//; check is anyone in the queue is an opponent}
{function;opp;{//;}
	{set;~warn;[]}{set;~unsafe;[]}{set;~warnmsg;}
	{set;~wsRoles;387715016222048265;387715242957864971;387715522575204352;401489230951481354;406431073296318465}
  	{set;~acviteWSoppRoles;[]}{set;~wsIndex;-1}{set;~now;{time;X}}
{void;
  	{repeat;
  		{set;~ws;{get;~wsRoles;{increment;~wsIndex}}}
		{if;{get;_{get;~ws}WSEnd};>;{get;~now};
          	{push;~activeWSoppRoles;{get;~oppRoles;{get;~wsIndex}};}
      	}
  		;{length;{get;~wsRoles}}
  	}
  	{foreach;~uid;{get;~queue};
    {void;{foreach;~opp;{get;~acviteWSoppRoles};
  	  {if;{userhasrole;{get;~opp};{get;~uid}};==;true;
  	    {push;~warn;{usernick;{get;~uid}} has {rolename;{get;~opp}}}
        {set;~corpName;{get;~corpNames;{indexof;{get;~oppRoles};{get;~opp}}}}
        {push;~unsafe;{get;~corpName}}
        {if;{get;~placemsg};includes;{get;~corpName};{set;~placemsg;{space}where?}}
      }
    }}
  	}
{if;{length;{get;~unsafe}};>;0;{set;~warnmsg;{newline}Warning: {join;~warn;,{space}}.{space}**Do NOT run this RS in {join;~unsafe;,{space}}!**}}
}
{get;~warnmsg}
}

{function;IconsUser;{//; returns a string with icon for each ws-tag the user has}
  	{set;~uid;{params;0}}
	{set;~wsRoles;387715016222048265;387715242957864971;387715522575204352;401489230951481354;406431073296318465}
  	{set;~corpRoles;["396993641480192000","396993657653428224","396993660455092224","401486171932196864","406418309454757899"]}
  	{set;~oppRoles;["423597234446139433","420267854110261258","423597167429550082","423595988784119809","503674249496625164"]}
  	{set;~allyRole;455134557532848139}
  	{set;~wsIcon;<:star_white_ws:379292760437555200>}
  	{set;~rsIcon;<:star_red_rs:379292716154093569>}
  	{set;~allyRSIcon;<:ALLY_RS:510209779231227914>}
	{set;~wsIcons;["<:BSO_WS:509790619577614367>","<:FIN_WS:509786098747179019>","<:ENF_WS:509790302622711808>","<:DAU_WS:509790315176001538>","<:OBN_WS:509790326257614851>"]}
  	{set;~rsIcons;["<:BSO_RS:510205929254420493>","<:FIN_RS:510206415563128853>","<:ENF_RS:510205040552574976>","<:DAU_RS:510205945276661782>","<:OBN_RS:510206456205803520>"]}
  	{set;~allyWSIcon;<:Ally:510103292697640960>}
  	{set;~allyOppIcons;{get;~wsIcons}}
	{set;~userIcons;[]}
	{set;~wsIndex;-1}{set;~now;{time;X}}{set;~wsFound;0}
{void;
	{repeat;
		{set;~ws;{get;~wsRoles;{increment;~wsIndex}}}
      	{set;~wsOpp;{get;~oppRoles;{get;~wsIndex}}}
		{if;{get;_{get;~ws}WSEnd};>;{get;~now};{//; active WS}
          	{if;{userhasrole;{get;~wsOpp};{get;~uid}};==;true;{//;opponent, cancels the check for BSOWS - should it?}
              {push;~userIcons;{get;~allyWSIcon}{get;~allyOppIcons;{get;~wsIndex}}}	{//; change this if/when we have ally-opponent icons}
              {set;~wsFound;1}
              ;{//; not opponent}
			  {if;{userhasrole;{get;~ws};{get;~uid}};==;true;
				{push;~userIcons;{get;~wsIcons;{get;~wsIndex}}}
              	{set;~wsFound;1}
              }
			}
		}
		;{length;{get;~wsRoles}}
	}
  	{if;{get;~wsFound};==;0;{//;not BSOWS, nor allyOpponent}
      {if;{userhasrole;{get;~allyRole};{get;~uid}};==;true;
       	{push;~userIcons;{get;~allyRSIcon}}
        ;{//; not ally}
        {set;~corpIndex;-1}
        {set;~rsFound;1}
        {repeat;
			{set;~corp;{get;~corpRoles;{increment;~corpIndex}}}
          	{if;{userhasrole;{get;~corp};{get;~uid}};==;true;
        		{push;~userIcons;{get;~rsIcons;{get;~corpIndex}}}
              	{set;~rsFound;1}
            }
            ;{length;{get;~wsRoles}}
		}   
      }
    }
}
{join;~userIcons;{space}}
}

{switch;{args;0};
icon;{//; }
{trim;{func.wsIconsUser;{args;1}}}
;
icon2;{//; }
{trim;{func.IconsUser;{args;1}}}
;{//;not implemented}
{join;{argsarray};,{space}}
}